+++
title = "Learn"
description = ""
tags = [
    "cmake","c/c++"]
date = "2018-09-02"
categories = [
    "Development",
    "c/c++",
]
menu = "main"
+++
# Learn Cmake 


- constructors
    - add_executable()
    - add_library()

- member variables

- member functions
    - get_target_property()
    - set_target_propertiess()
    - get)property(TARGET)
    - set_property(TARGET)
    - target_compile_features()
    - target_compile_options()
    - target_include_directories()
    - target_link_libraries()
    - target_sources()

bad commands:

- add_compile_options()
- include_directories()
- link_directories()
- link_libraries()

target_compile_features(Foo
PBULIC 
    cxx_strong_enums
PRIVATE
    cxx_lambdas
    cxx_range_for
)
add cxx_strong_enums to the tartget properties
 COMPILE_FREATURES AND INTERFACE_COMPILE_FEATURES
 adds cxx_labbdas; cxx_range_ffor to the target property COMPILE_FEATURES.
 DON'T DO THIS USING CMAKE_CXX_FLAGS

 Non-INTERFACE_properties defien the build specification fo a target.
 INTERFACE_properties define the usage requirements of a target.

PRIVATE populates the non-INTERFADCE_property.
INTERFACE populates the INTERFACE)property.
PUBLIC populates both.


use target_link_libraries() to express direct dependencides




how to link package:
find_package(Foo 2.0 RAQUIRED)
target_link_libraries(... Foo:Foo ...)



static analysis tool interrated with cmak
<lang>_CLANG_TIDY
<lang>_CPPLINT
<lang>_INCLUDE_WHAT_YOU_USE
<lang> = C or CXX
LINK+WHAT_YOU_USE



